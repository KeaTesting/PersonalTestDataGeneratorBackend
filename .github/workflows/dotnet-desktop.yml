name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: PersonalTestDataGeneratorBackend.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: UnitTest/UnitTests.csproj            # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Run tests and collect coverage
      run: dotnet test UnitTests/UnitTests.csproj --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.cobertura.xml
      continue-on-error: true  # Ensure the next step runs even if tests fail
    
    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./TestResults/coverage.cobertura.xml

    
    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: ./TestResults
    
    - name: Evaluate coverage
      run: |
        # Use xmllint or another tool to parse the coverage result
        coverage=$(xmllint --xpath "string(//coverage/@line-rate)" ./TestResults/coverage.cobertura.xml)
        
        # Convert coverage to percentage
        coverage_percentage=$(echo "$coverage * 100" | bc)
    
        echo "Coverage is: $coverage_percentage%"
    
        # Fail the job if coverage is below 50%
        if (( $(echo "$coverage_percentage < 50" | bc -l) )); then
          echo "Code coverage is below 50%. Failing the build."
          exit 1
        else
          echo "Code coverage is sufficient."
        fi


      # Execute all integration tests in the solution
    - name: Execute integration tests
      run: dotnet test IntegrationsTests/IntegrationsTests.csproj

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
      
