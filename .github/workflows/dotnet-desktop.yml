name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: PersonalTestDataGeneratorBackend.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: UnitTest/UnitTests.csproj            # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test UnitTests/UnitTests.csproj --collect:"XPlat Code Coverage" --results-directory TestResults

      # Execute all integration tests in the solution
    - name: Execute integration tests
      run: dotnet test IntegrationsTests/IntegrationsTests.csproj

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
    - name: Use ReportGenerator to check coverage
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator "-reports:TestResults/*/coverage.cobertura.xml" "-targetdir:coverage" "-reporttypes:HtmlSummary"
    
    - name: Check code coverage
      id: coverage
      shell: bash  # Ensures the script is run in Bash
      run: |
        coverage=$(grep -Po 'line-rate="\K[0-9.]+' coverage/Summary.xml | awk '{print $1*100}')
        echo "Code coverage: $coverage%"
        if (( $(echo "$coverage < 75" | bc -l) )); then
          echo "Code coverage is below 75%!"
          exit 1
        fi
