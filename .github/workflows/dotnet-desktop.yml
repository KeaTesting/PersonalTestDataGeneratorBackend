name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Solution_Name: PersonalTestDataGeneratorBackend.sln
      Test_Project_Path: UnitTest/UnitTests.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution and collect coverage
    - name: Run tests and collect coverage
      run: dotnet test $env:Test_Project_Path --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx \
        /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.cobertura.xml
      continue-on-error: true  # Ensure the next step runs even if tests fail

    - name: Find coverage report
      id: find_coverage
      shell: pwsh  # Specify PowerShell as the shell
      run: |
        # Use PowerShell to find the coverage report
        $coverage_file = Get-ChildItem -Path './TestResults' -Filter 'coverage.cobertura.xml' -Recurse | Select-Object -First 1
        if ($null -eq $coverage_file) {
          Write-Error "Coverage file not found!"
          exit 1
        }
        Write-Host "Coverage file found: $coverage_file"
        echo "coverage_file=$($coverage_file.FullName)" >> $GITHUB_ENV

    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ${{ env.coverage_file }}

    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: ./TestResults

    - name: Evaluate coverage
      run: |
        # Now we have a path to the coverage file
        coverage_file="./TestResults/coverage.cobertura.xml"
        coverage=$(xmllint --xpath "string(//coverage/@line-rate)" "$coverage_file")
        
        # Convert coverage to percentage
        coverage_percentage=$(echo "$coverage * 100" | bc)

        echo "Coverage is: $coverage_percentage%"

        # Fail the job if coverage is below 50%
        if (( $(echo "$coverage_percentage < 50" | bc -l) )); then
          echo "Code coverage is below 50%. Failing the build."
          exit 1
        else
          echo "Code coverage is sufficient."
        fi

    # Execute all integration tests in the solution
    - name: Execute integration tests
      run: dotnet test IntegrationsTests/IntegrationsTests.csproj

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
